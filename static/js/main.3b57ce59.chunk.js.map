{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","App","props","state","markdown","placeholder","handleChange","bind","e","this","setState","target","value","className","role","title","onChange","href","rel","React","Component","Title","dangerouslySetInnerHTML","__html","Editor","id","Preview","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAGAA,IAAOC,WAAW,CAChBC,QAAQ,I,IAGJC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAS,CACZC,SAAUC,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,0EAONC,GACXC,KAAKC,SAAS,CACZN,SAAUI,EAAEG,OAAOC,U,+BAIrB,OACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,wEACb,0BAAMA,UAAU,wBAAhB,uBAEF,0BAAMC,KAAK,OAAOD,UAAU,oCAC1B,yBAAKA,UAAU,aACb,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,CAAOE,MAAM,WACb,kBAAC,EAAD,CAAQX,SAAUK,KAAKN,MAAMC,SACrBY,SAAUP,KAAKH,iBAG3B,yBAAKO,UAAU,+BACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,CAAOE,MAAM,YACb,kBAAC,EAAD,CAASX,SAAUK,KAAKN,MAAMC,eAKtC,4BAAQS,UAAU,oBAChB,yBAAKA,UAAU,aACb,sDACsB,uBAAGI,KAAK,mCAAmCN,OAAO,SAASO,IAAI,uBAA/D,oB,GAvChBC,IAAMC,WAgDlBC,EAAQ,SAACnB,GACb,OACE,wBAAIW,UAAU,8EACVS,wBAAyB,CAACC,OAAQrB,EAAMa,UAI1CS,EAAS,SAACtB,GACd,OACE,8BAAUuB,GAAG,SACHZ,UAAU,qCACVD,MAAOV,EAAME,SACbY,SAAUd,EAAMc,YAIxBU,EAAU,SAACxB,GACf,OACE,yBAAKuB,GAAG,UACHZ,UAAU,4CACVS,wBAAyB,CAACC,OAAQzB,IAAOI,EAAME,cAIlDC,EAAW,itCAgDFJ,I,MCnHK0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3b57ce59.chunk.js","sourcesContent":["import React from 'react';\nimport marked from 'marked';\n\nmarked.setOptions({\n  breaks: true,\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state =  {\n      markdown: placeholder\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      markdown: e.target.value\n    });\n  }\n  render() {\n    return (\n      <div className=\"h-100 d-flex flex-column\">\n        <nav className=\"navbar justify-content-center navbar-dark bg-gradient-dark shadow-sm\">\n          <span className=\"navbar-brand mb-0 h1\">Markdown Previewer</span>\n        </nav>\n        <main role=\"main\" className=\"App container h-100 pt-3 pt-lg-4\">\n          <div className=\"row h-100\">\n            <div className=\"col-lg-6 h-100 mb-3 mb-lg-0\">\n              <div className=\"d-flex flex-column h-100\">\n                <Title title=\"Editor\" />\n                <Editor markdown={this.state.markdown}\n                        onChange={this.handleChange} />\n              </div>\n            </div>\n            <div className=\"col-lg-6 h-100 mb-3 mb-lg-0\">\n              <div className=\"d-flex flex-column h-100\">\n                <Title title=\"Preview\" />\n                <Preview markdown={this.state.markdown} />\n              </div>\n            </div>\n          </div>\n        </main>\n        <footer className=\"text-center py-3\">\n          <div className=\"container\">\n            <small>\n              Designed & built by <a href=\"https://github.com/kaizen-design\" target=\"_blank\" rel=\"noopener noreferrer\">Denis B.</a>\n            </small>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nconst Title = (props) => {\n  return (\n    <h6 className=\"w-100 py-2 px-3 mb-0 bg-gradient-secondary text-white rounded-top shadow-sm\"\n        dangerouslySetInnerHTML={{__html: props.title}} />\n  )\n};\n\nconst Editor = (props) => {\n  return (\n    <textarea id=\"editor\"\n              className=\"w-100 p-3 rounded-bottom shadow-sm\"\n              value={props.markdown}\n              onChange={props.onChange}/>\n  )\n};\n\nconst Preview = (props) => {\n  return (\n    <div id=\"preview\"\n         className=\"w-100 p-3 border rounded-bottom shadow-sm\"\n         dangerouslySetInnerHTML={{__html: marked(props.markdown)}} />\n  )\n};\n\nconst placeholder =\n  `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHere's some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![Kaizen Logo](https://kaizen-design.ru/wp-content/themes/kaizen/img/logo.png)\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/App.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}